/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package carlosvelasquez_lab2;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author imado
 */
public class Main extends javax.swing.JFrame {
    
    static Ejercito rusos = new Ejercito(1);
    static Ejercito alemanes = new Ejercito(2);
    static Ejercito alumnos = new Ejercito(3);
    
    static Ejercito ej = rusos;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        refrescarArbol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmArbol = new javax.swing.JPopupMenu();
        miModificarSoldado = new javax.swing.JMenuItem();
        miEliminarSoldado = new javax.swing.JMenuItem();
        jdBitacora = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taBitacora = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbEjercito = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtSoldados = new javax.swing.JTree();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        miModificarSoldado.setText("Modificar Soldado");
        miModificarSoldado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miModificarSoldadoActionPerformed(evt);
            }
        });
        pmArbol.add(miModificarSoldado);

        miEliminarSoldado.setText("Eliminar Soldado");
        miEliminarSoldado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEliminarSoldadoActionPerformed(evt);
            }
        });
        pmArbol.add(miEliminarSoldado);

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 30)); // NOI18N
        jLabel3.setText("Bitácora de Guerra");

        taBitacora.setEditable(false);
        taBitacora.setColumns(20);
        taBitacora.setRows(5);
        jScrollPane2.setViewportView(taBitacora);

        jButton5.setText("Continuar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jdBitacoraLayout = new javax.swing.GroupLayout(jdBitacora.getContentPane());
        jdBitacora.getContentPane().setLayout(jdBitacoraLayout);
        jdBitacoraLayout.setHorizontalGroup(
            jdBitacoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdBitacoraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jdBitacoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jdBitacoraLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 150, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdBitacoraLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jdBitacoraLayout.setVerticalGroup(
            jdBitacoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdBitacoraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador de Guerra");

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 30)); // NOI18N
        jLabel1.setText("Menú de Preparación");

        jLabel2.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel2.setText("Ejército Actual: <ejército>");

        jButton1.setText("Cambiar a Ejército Seleccionado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Soldados");
        jtSoldados.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jtSoldados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtSoldadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtSoldados);

        jButton2.setText("Reclutar Soldado");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setText("Refrescar Árbol");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton7.setText("Simular Batallas");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton3.setText("Guardar a Archivos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Leer de Archivos");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1)
                                .addComponent(jLabel2)
                                .addComponent(cbEjercito, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbEjercito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        boolean continuar;
        String[] camposNuevos;

        do{boolean selRPG = false;
            continuar = false;
            String[] campos = ej.getCampos();
            camposNuevos = new String[campos.length];
            int poderFuego;

            for (int i = 0; i < campos.length - 1; i++) {
                if (i != ej.getIndiceResistencia() && i != 0) {
                    String out = "Ingresar " + campos[i];
                    if (i == ej.getIndiceArma()) {
                        boolean rep;
                        do{
                            rep = false;
                            out = "Armamento Disponible:\n\n";

                            String[] armas = ej.getArmas();
                            int[] armasPoder = ej.getArmasPoder();

                            for (int j = 0; j < armas.length; j++) {
                                out += ("[" + (j+1) + "] " + armas[j] + " | Poder de Fuego: " + armasPoder[j] + "\n");
                            }
                            out += ("\nSeleccione un arma: ");
                            
                            
                            int armaSel = Integer.parseInt(JOptionPane.showInputDialog(this, out));

                            if ("RPG-7".equals(armas[2]) && armaSel == 3) {
                                selRPG = true;
                            }
                            
                            try {
                                camposNuevos[i] = armas[armaSel-1];
                                camposNuevos[i + 1] = Integer.toString(armasPoder[armaSel - 1]);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(this, "Código de arma inválido", "Error", 0);
                                rep = true;
                            }
                            
                        }while(rep);
                    }else{
                        out += (": ");
                        camposNuevos[i] = JOptionPane.showInputDialog(this, out);
                    }
                }else if (i == 0){
                    camposNuevos[i] = Integer.toString(ej.getNum() + 1);
                    JOptionPane.showMessageDialog(this, "Reclutando al soldado numero " + (ej.getNum() + 1) + ".");
                }else{
                    JOptionPane.showMessageDialog(this, "El soldado tendrá una resistencia de " + (8*(Integer.parseInt((camposNuevos[(ej.getIndiceEdad())])))));
                    camposNuevos[i] = Integer.toString((8*(Integer.parseInt((camposNuevos[(ej.getIndiceEdad())])))));
                    //System.out.println("");
                }
            }

            if (selRPG == true && (25 < Integer.parseInt(camposNuevos[ej.getIndiceEdad()]))) {
                continuar = true;
            }else if(selRPG == false && (Integer.parseInt(camposNuevos[ej.getIndiceEdad()]) > ej.getEdadMin())){
                continuar = true;
            }
            else{
                JOptionPane.showMessageDialog(this, "El soldado no cumple los requerimientos de edad.", "Error", 0);
            }

            if (continuar == true) {
                JOptionPane.showMessageDialog(this, "Soldado reclutado exitosamente.");
            }
        }while(continuar == false);
            

        ej.nuevoSoldado(camposNuevos);
        refrescarArbol();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        refrescarArbol();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ej = (Ejercito) cbEjercito.getSelectedItem();
        refrescarArbol();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtSoldadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSoldadosMouseClicked
        if (evt.isMetaDown()) {
            pmArbol.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jtSoldadosMouseClicked

    private void miModificarSoldadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miModificarSoldadoActionPerformed
        boolean continuar;
        String[] camposNuevos;
        
        if (getNumSoldado() != "-1") {

        do{
            boolean selRPG = false;
            continuar = false;
            String[] campos = ej.getCampos();
            camposNuevos = new String[campos.length];
            int poderFuego;

            for (int i = 0; i < campos.length - 1; i++) {
                if (i != ej.getIndiceResistencia() && i != 0) {
                    String out = "Ingresar " + campos[i];
                    if (i == ej.getIndiceArma()) {
                        boolean rep;
                        do{
                            rep = false;
                            out = "Armamento Disponible:\n\n";

                            String[] armas = ej.getArmas();
                            int[] armasPoder = ej.getArmasPoder();

                            for (int j = 0; j < armas.length; j++) {
                                out += ("[" + (j+1) + "] " + armas[j] + " | Poder de Fuego: " + armasPoder[j] + "\n");
                            }
                            out += ("\nSeleccione un arma: ");
                            
                            
                            int armaSel = Integer.parseInt(JOptionPane.showInputDialog(this, out));

                            if ("RPG-7".equals(armas[2]) && armaSel == 3) {
                                selRPG = true;
                            }
                            
                            try {
                                camposNuevos[i] = armas[armaSel-1];
                                camposNuevos[i + 1] = Integer.toString(armasPoder[armaSel - 1]);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(this, "Código de arma inválido", "Error", 0);
                                rep = true;
                            }
                            
                        }while(rep);
                    }else{
                        out += (": ");
                        camposNuevos[i] = JOptionPane.showInputDialog(this, out);
                    }
                }else if (i == 0){
                    camposNuevos[i] = Integer.toString(ej.getNum() + 1);
                    JOptionPane.showMessageDialog(this, "Modificando al soldado numero " + (getNumSoldado()) + ".");
                }else{
                    JOptionPane.showMessageDialog(this, "El soldado tendrá una resistencia de " + (8*(Integer.parseInt((camposNuevos[(ej.getIndiceEdad())])))));
                    camposNuevos[i] = Integer.toString((8*(Integer.parseInt((camposNuevos[(ej.getIndiceEdad())])))));
                    //System.out.println("");
                }
            }

            if (selRPG == true && (25 < Integer.parseInt(camposNuevos[ej.getIndiceEdad()]))) {
                continuar = true;
            }else if(selRPG == false && (Integer.parseInt(camposNuevos[ej.getIndiceEdad()]) > ej.getEdadMin())){
                continuar = true;
            }
            else{
                JOptionPane.showMessageDialog(this, "El soldado no cumple los requerimientos de edad.", "Error", 0);
            }

            if (continuar == true) {
                JOptionPane.showMessageDialog(this, "Soldado modificado exitosamente.");
            }
        }while(continuar == false);
            ej.modificarSoldado(camposNuevos, getNumSoldado());
            refrescarArbol();
        }
    }//GEN-LAST:event_miModificarSoldadoActionPerformed

    private void miEliminarSoldadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEliminarSoldadoActionPerformed
        if (getNumSoldado() != "-1") {
            ej.eliminarSoldado(getNumSoldado());
            JOptionPane.showMessageDialog(this, "Soldado eliminado exitosamente");
            refrescarArbol();
        }
    }//GEN-LAST:event_miEliminarSoldadoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        guardarTodo();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        leerTodo();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        batalla();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jdBitacora.dispose();
        taBitacora.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main w = new Main();
                w.setLocationRelativeTo(null);
                w.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbEjercito;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jdBitacora;
    private javax.swing.JTree jtSoldados;
    private javax.swing.JMenuItem miEliminarSoldado;
    private javax.swing.JMenuItem miModificarSoldado;
    private javax.swing.JPopupMenu pmArbol;
    private javax.swing.JTextArea taBitacora;
    // End of variables declaration//GEN-END:variables
    
    void refrescarArbol(){
        String[] campos = ej.getCampos();
        String[][] soldados = ej.getListaSoldados();
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Soldados " + ej.getNombreEjercito());
        
        for (String[] soldado : soldados) {
            DefaultMutableTreeNode n = new DefaultMutableTreeNode("Soldado " + soldado[0]);
            
            for (int i = 1; i < soldado.length; i++) {
                DefaultMutableTreeNode n2 = new DefaultMutableTreeNode(campos[i] 
                        + ": " + soldado[i]);
                
                n.add(n2);
            }
            
            root.add(n);
        }
        
        DefaultTreeModel tm = new DefaultTreeModel(root);
        jtSoldados.setModel(tm);
        
        
        DefaultComboBoxModel cbm = new DefaultComboBoxModel();
        
        if (ej.getNombreEjercito() != rusos.getNombreEjercito()) {
            cbm.addElement(rusos);
        }
        
        if (ej.getNombreEjercito() != alemanes.getNombreEjercito()) {
            cbm.addElement(alemanes);
        }
        
        if (ej.getNombreEjercito() != alumnos.getNombreEjercito()) {
            cbm.addElement(alumnos);
        }
        
        cbEjercito.setModel(cbm);
        jLabel2.setText("Ejército Actual: " + ej.getNombreEjercito());
    }

    private String getNumSoldado() {
        try {
            String s =  jtSoldados.getLastSelectedPathComponent().toString();
            String[] sa;
            sa = s.split(" ");
            return sa[1];
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar el número de soldado");
        }
        
        return "-1";
    }
    
    void batalla(){
        Ejercito ej[] = new Ejercito[3];
        int contDerrotados;
        String log = "";
        
        for (int i = 0; true; i++) {
            switch (i){
                case 0:
                    ej[0]= rusos;
                    ej[1] = alemanes;
                    ej[2] = alumnos;
                    break;
                case 1:
                    ej[0]= alemanes;
                    ej[1] = rusos;
                    ej[2] = alumnos;
                    break;
                case 2:
                    ej[0]= alumnos;
                    ej[1] = rusos;
                    ej[2] = alemanes;
                    break;
            }
            
            contDerrotados = 0;
            
            for (int j = 1; j <= 2; j++) {
                if (ej[j].fueDerrotado() == false) {
                    int sobrecarga = (ej[0].getNum() + 1) - (ej[j].getNum() + 1), sobCont = 1;
                    ArrayList<String[]> listaSoldados = ej[0].getListaSoldadosAL();
                    ArrayList<String[]> listaSoldadosEnem = ej[j].getListaSoldadosAL();
                    int indRes = ej[j].getIndiceResistencia();
                    int indPod = ej[0].getIndicePoder();
                    int kUlt = 0;

                    log += ("¡Los " + ej[0].getNombreEjercito() + " están atacando a los " + ej[j].getNombreEjercito() + "!\n");

                    for (int k = 0; k < listaSoldados.size(); k++) {
                        if (k < listaSoldadosEnem.size()) {
                            listaSoldadosEnem.get(k)[indRes] = Integer.toString(Integer.parseInt(listaSoldadosEnem.get(k)[indRes]) - Integer.parseInt(listaSoldados.get(k)[indPod]));
                            kUlt = k;
                        }else{
                            if (sobrecarga > 0) {
                                listaSoldadosEnem.get(kUlt)[indRes] = Integer.toString(Integer.parseInt(listaSoldadosEnem.get(kUlt)[indRes]) - Integer.parseInt(listaSoldados.get(k)[indPod]));
                            }
                        }
                    }

                    ej[j].setListaSoldados(listaSoldadosEnem);
                    ej[j].removerMuertos();
                }else
                    contDerrotados ++;
            }
            
            if (contDerrotados > 1) {
                log += ("¡Los " + ej[0].getNombreEjercito() + " han ganado!");
                JOptionPane.showMessageDialog(this, "¡Los " + ej[0].getNombreEjercito() + " han ganado!");
                break;
            }
            
            if (i == 2) {
                i = 0;
            }
            
        }
        Ejercito[] ej2 = new Ejercito[3];
        
        ej2[0] = rusos;
        ej2[1] = alemanes;
        ej2[2] = alumnos;
        
        log += "\n\n";
        
        for (int i = 0; i < 3; i++) {
            log += ej2[i].imprimirMuertos();
            log += "\n\n";
        }
        
        taBitacora.setText(log);
        
        jdBitacora.pack();
        jdBitacora.setModal(true);
        jdBitacora.setLocationRelativeTo(this);
        jdBitacora.setVisible(true);
    }

    private void guardarTodo() {
        try {
            File f = new File("./rusos.sim");
            FileOutputStream fos = new FileOutputStream(f);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            
            oos.writeObject(rusos);
            oos.flush();
            oos.close();
            fos.close();
            
            f = new File("./alemanes.sim");
            fos = new FileOutputStream(f);
            oos = new ObjectOutputStream(fos);
            
            oos.writeObject(alemanes);
            oos.flush();
            oos.close();
            fos.close();
            
            f = new File("./alumnos.sim");
            fos = new FileOutputStream(f);
            oos = new ObjectOutputStream(fos);
            
            oos.writeObject(alumnos);
            oos.flush();
            oos.close();
            fos.close();
            
            JOptionPane.showMessageDialog(this, "Archivos guardados exitosamente");
            ej = rusos;
            refrescarArbol();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar a archivos", "Error", 0);
        }
    }

    private void leerTodo() {
        try {
            File f = new File("./rusos.sim");
            FileInputStream fos = new FileInputStream(f);
            ObjectInputStream oos = new ObjectInputStream(fos);
            
            rusos = (Ejercito) oos.readObject();
            oos.close();
            fos.close();
            
            f = new File("./alemanes.sim");
            fos = new FileInputStream(f);
            oos = new ObjectInputStream(fos);
            
            alemanes = (Ejercito) oos.readObject();
            oos.close();
            fos.close();
            
            f = new File("./alumnos.sim");
            fos = new FileInputStream(f);
            oos = new ObjectInputStream(fos);
            
            alumnos = (Ejercito) oos.readObject();
            oos.close();
            fos.close();
            
            JOptionPane.showMessageDialog(this, "Archivos leidos exitosamente");
            ej = rusos;
            refrescarArbol();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al leer de archivos", "Error", 0);
        }
    }

}
